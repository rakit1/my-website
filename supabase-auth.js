// supabase-auth.js ‚Äî –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
(function () {
  'use strict';

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  const SUPABASE_URL = 'https://egskxyxgzdidfbxhjaud.supabase.co';
  const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVnc2t4eXhnemRpZGZieGhqYXVkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTgwNTA2MDcsImV4cCI6MjA3MzYyNjYwN30.X60gkf8hj0YEKzLdCFOOXRAlfDJ2AoINoJHY8qPeDFw';

  let sb = null;

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
  function initSupabase() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SDK
    if (!window.supabase) {
      console.error('‚ùå Supabase SDK –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É —Å–∫—Ä–∏–ø—Ç–∞.');
      return false;
    }

    if (!window.supabase.createClient) {
      console.error('‚ùå createClient –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ Supabase SDK!');
      return false;
    }

    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {
      console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã SUPABASE_URL –∏–ª–∏ SUPABASE_ANON_KEY!');
      return false;
    }

    try {
      sb = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);
      console.log('‚úÖ Supabase client —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      console.log('üîó URL:', SUPABASE_URL);
      return true;
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Supabase client:', err);
      return false;
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  function setupAuth() {
    if (!sb) return;

    console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...');
    
    try {
      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      sb.auth.onAuthStateChange((event, session) => {
        console.log('üîÑ Auth state changed:', event);
        if (session) {
          console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', session.user.email || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω');
        }
        updateUserSection(session);
      });

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      sb.auth.getSession().then(({ data, error }) => {
        if (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
          return;
        }
        
        if (data.session) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è');
          updateUserSection(data.session);
        } else {
          console.log('‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç');
          updateUserSection(null);
        }
      });

    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ auth:', err);
    }
  }

  // –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
  window.signInWithDiscord = signInWithDiscord;
  window.signOutSupabase = signOutSupabase;
  window.checkAuthAndShowIp = checkAuthAndShowIp;
  window.updateUserSectionFromSession = updateUserSection;

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Discord
  async function signInWithDiscord() {
    console.log('üéÆ –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Discord...');
    
    if (!sb) {
      console.error('‚ùå Supabase client –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!');
      alert('–û—à–∏–±–∫–∞: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }

    try {
      console.log('üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º OAuth –∑–∞–ø—Ä–æ—Å...');
      
      const { data, error } = await sb.auth.signInWithOAuth({
        provider: 'discord',
        options: {
          scopes: 'identify email',
          redirectTo: `${window.location.origin}${window.location.pathname}`
        }
      });

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ OAuth:', error);
        if (error.message.includes('Invalid login credentials')) {
          alert('Discord OAuth –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –ø–∞–Ω–µ–ª–∏ Supabase.');
        } else {
          alert(`–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ${error.message}`);
        }
        return;
      }

      console.log('‚úÖ OAuth –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç...');

    } catch (err) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', err);
      alert(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ —á–µ—Ä–µ–∑ Discord: ${err.message}`);
    }
  }

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  async function signOutSupabase() {
    if (!sb) {
      console.log('‚ÑπÔ∏è Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤—ã—Ö–æ–¥–∞');
      return;
    }
    
    try {
      console.log('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –≤—ã—Ö–æ–¥...');
      const { error } = await sb.auth.signOut();
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        return;
      }
      
      console.log('‚úÖ –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      updateUserSection(null);
      
    } catch (err) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', err);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –ø–æ–∫–∞–∑ –º–æ–¥–∞–ª–∞ IP
  async function checkAuthAndShowIp() {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    
    if (!sb) {
      console.log('‚ùå Supabase –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞');
      showAuthModal();
      return;
    }

    try {
      const { data, error } = await sb.auth.getSession();
      
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Å—Å–∏–∏:', error);
        showAuthModal();
        return;
      }

      if (data.session && data.session.user) {
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º IP');
        showIpModal();
      } else {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        showAuthModal();
      }
      
    } catch (err) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
      showAuthModal();
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  function updateUserSection(session) {
    const userSection = document.getElementById('userSection');
    if (!userSection) {
      console.warn('‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç userSection –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }

    if (session && session.user) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      const user = session.user;
      const meta = user.user_metadata || {};
      const name = meta.username || meta.user_name || meta.full_name || user.email || '–ò–≥—Ä–æ–∫';
      const initials = name.charAt(0).toUpperCase();

      console.log('üë§ –û–±–Ω–æ–≤–ª—è–µ–º UI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', name);

      userSection.innerHTML = `
        <div class="user-info" title="${escapeHtml(name)}">
          <div class="user-avatar" id="userAvatar">${escapeHtml(initials)}</div>
          <div style="margin-left:8px; font-weight:700; color:var(--text)">${escapeHtml(truncate(name, 18))}</div>
        </div>
      `;

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∞–≤–∞—Ç–∞—Ä
      const avatar = document.getElementById('userAvatar');
      if (avatar) {
        avatar.addEventListener('click', () => {
          if (confirm('–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?')) {
            signOutSupabase();
          }
        });
      }

      // –°–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      hideAuthModal();
      
    } else {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      console.log('üë§ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—Ö–æ–¥–∞');
      userSection.innerHTML = '<button class="login-btn">–í–æ–π—Ç–∏</button>';
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  function showAuthModal() {
    const modal = document.getElementById('authPage');
    if (modal) {
      modal.style.display = 'flex';
    }
  }

  // –°–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  function hideAuthModal() {
    const modal = document.getElementById('authPage');
    if (modal) {
      modal.style.display = 'none';
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª —Å IP
  function showIpModal() {
    const modal = document.getElementById('ipModal');
    if (modal) {
      modal.style.display = 'flex';
    }
  }

  // –£—Ç–∏–ª–∏—Ç—ã
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text || '';
    return div.innerHTML;
  }

  function truncate(str, length) {
    str = String(str || '');
    return str.length > length ? str.slice(0, length - 1) + '‚Ä¶' : str;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
  function tryInit(attempts = 0) {
    const maxAttempts = 3;
    
    if (attempts >= maxAttempts) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Supabase –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
      return;
    }

    if (initSupabase()) {
      setupAuth();
      return;
    }

    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    setTimeout(() => {
      console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (${attempts + 1}/${maxAttempts})...`);
      tryInit(attempts + 1);
    }, 100 * (attempts + 1));
  }

  // –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Supabase');
      tryInit();
    });
  } else {
    console.log('üìÑ DOM —É–∂–µ –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Supabase');
    tryInit();
  }

})();
