class TicketPage {
    constructor(authManager) {
        this.authManager = authManager;
        this.supabase = authManager.supabase;
        this.user = null;
        this.ticketId = new URLSearchParams(window.location.search).get('id');
        this.isCurrentUserAdmin = false;
        this.isTicketClosed = false;
        this.channel = null;
        this.isSubscribed = false;

        // –ö—ç—à –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        this.participants = new Map();

        // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
        this.chatBox = document.getElementById('chat-box');
        this.messageForm = document.getElementById('message-form');
        this.ticketTitle = document.getElementById('ticket-title');
        this.messageTextarea = this.messageForm.querySelector('textarea[name="message"]');
        this.sendMessageButton = this.messageForm.querySelector('button[type="submit"]');
        this.closeTicketButton = document.getElementById('close-ticket-btn');
        this.confirmationModal = document.getElementById('confirmation-modal');
        this.confirmCloseBtn = document.getElementById('confirm-close-btn');
        this.cancelCloseBtn = document.getElementById('cancel-close-btn');

        this.init();
    }

    /**
     * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–∏–∫–µ—Ç–∞...');
        
        if (!this.ticketId) {
            console.error('‚ùå ID —Ç–∏–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL');
            window.location.href = 'account.html';
            return;
        }

        try {
            const { data: { user }, error: authError } = await this.supabase.auth.getUser();
            
            if (authError) throw authError;
            
            if (user) {
                this.user = user;
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω:', user.email);
                await this.loadInitialData();
                this.setupEventListeners();
                await this.subscribeToRealtimeMessages();
            } else {
                console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ...');
                window.location.href = 'index.html';
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
            this.showError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞
     */
    async loadInitialData() {
        try {
            console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–∞...');

            // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const { data: profile, error: profileError } = await this.supabase
                .from('profiles')
                .select('role, username, avatar_url')
                .eq('id', this.user.id)
                .single();

            if (profileError) throw profileError;
            
            if (profile) {
                this.isCurrentUserAdmin = profile.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
                this.participants.set(this.user.id, profile);
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–æ–ª—å:', profile.role);
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∏–∫–µ—Ç—É
            const { data: ticketData, error: ticketError } = await this.supabase
                .from('tickets')
                .select('user_id, is_closed, title')
                .eq('id', this.ticketId)
                .single();

            if (ticketError) throw ticketError;
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if (!this.isCurrentUserAdmin && ticketData.user_id !== this.user.id) {
                throw new Error("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É");
            }
            
            this.isTicketClosed = ticketData.is_closed;
            this.ticketTitle.textContent = ticketData.title || `–¢–∏–∫–µ—Ç #${this.ticketId}`;
            this.updateTicketUI();

            // 3. –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            const { data: messages, error: messagesError } = await this.supabase
                .from('messages')
                .select(`
                    *,
                    profiles (
                        username,
                        avatar_url,
                        role
                    )
                `)
                .eq('ticket_id', this.ticketId)
                .order('created_at', { ascending: true });

            if (messagesError) throw messagesError;
            
            // –ö—ç—à–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
            messages.forEach(msg => {
                if (msg.profiles && !this.participants.has(msg.user_id)) {
                    this.participants.set(msg.user_id, msg.profiles);
                }
            });

            // 4. –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            this.renderMessages(messages);
            console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError(error.message);
        }
    }

    /**
     * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
     */
    renderMessages(messages) {
        this.chatBox.innerHTML = '';
        messages.forEach(msg => this.addMessageToBox(msg, false));
        this.scrollToBottom();
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
     */
    addMessageToBox(message, isRealtime = false) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ
        if (message.id && document.querySelector(`[data-message-id="${message.id}"]`)) {
            if (isRealtime) console.log('‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:', message.id);
            return;
        }

        const authorProfile = this.participants.get(message.user_id) || { 
            username: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π', 
            avatar_url: null, 
            role: '–ò–≥—Ä–æ–∫' 
        };

        const isUserMessage = message.user_id === this.user.id;
        const isAdmin = authorProfile.role === '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
        const messageId = message.id || `temp_${Date.now()}`;

        const wrapper = document.createElement('div');
        wrapper.className = `message-wrapper ${isUserMessage ? 'user' : 'other'} ${isRealtime ? 'realtime' : ''}`;
        wrapper.dataset.messageId = messageId;
        
        const date = new Date(message.created_at || new Date()).toLocaleString('ru-RU');
        
        const avatarHTML = authorProfile.avatar_url
            ? `<img src="${authorProfile.avatar_url}" alt="–ê–≤–∞—Ç–∞—Ä ${authorProfile.username}" class="message-avatar-img">`
            : `<div class="message-avatar-placeholder">${authorProfile.username.charAt(0).toUpperCase()}</div>`;

        wrapper.innerHTML = `
            <div class="message-header">
                <div class="message-avatar">${avatarHTML}</div>
                <div class="message-author ${isAdmin ? 'admin-role' : ''}">
                    ${authorProfile.username}
                    ${isUserMessage ? ' (–í—ã)' : ''}
                </div>
                ${!message.id ? '<span class="message-status sending">‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...</span>' : ''}
            </div>
            <div class="message-content">
                <p>${this.escapeHtml(message.content)}</p>
                <span class="message-time">${date}</span>
            </div>
        `;

        this.chatBox.appendChild(wrapper);
        
        if (isRealtime) {
            wrapper.classList.add('new-message');
            setTimeout(() => wrapper.classList.remove('new-message'), 500);
        }
        
        this.scrollToBottom();
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        this.messageForm.addEventListener('submit', (e) => this.handleMessageSubmit(e));

        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
        this.closeTicketButton.addEventListener('click', () => {
            if (!this.isTicketClosed) this.confirmationModal.classList.add('active');
        });

        this.cancelCloseBtn.addEventListener('click', () => {
            this.confirmationModal.classList.remove('active');
        });

        this.confirmCloseBtn.addEventListener('click', () => this.executeTicketClosure());

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è
        this.messageTextarea.addEventListener('input', () => {
            this.messageTextarea.style.height = 'auto';
            this.messageTextarea.style.height = Math.min(this.messageTextarea.scrollHeight, 120) + 'px';
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    async handleMessageSubmit(e) {
        e.preventDefault();
        
        const content = this.messageTextarea.value.trim();
        if (!content || this.isTicketClosed) return;

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const tempMessage = {
            user_id: this.user.id,
            ticket_id: this.ticketId,
            content: content,
            created_at: new Date().toISOString()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ
        const originalContent = content;
        this.messageTextarea.value = '';
        this.messageTextarea.style.height = 'auto';
        this.sendMessageButton.disabled = true;

        // –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.addMessageToBox(tempMessage, false);

        try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const { data: newMessage, error } = await this.supabase
                .from('messages')
                .insert({ 
                    ticket_id: this.ticketId, 
                    user_id: this.user.id, 
                    content: originalContent 
                })
                .select(`
                    *,
                    profiles (
                        username,
                        avatar_url,
                        role
                    )
                `)
                .single();

            if (error) throw error;

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            if (newMessage.profiles) {
                this.participants.set(newMessage.user_id, newMessage.profiles);
            }

            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', newMessage.id);

            // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞—Å—Ç–æ—è—â–µ–µ –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ realtime)
            const tempElement = document.querySelector(`[data-message-id="temp_${tempMessage.created_at}"]`);
            if (tempElement) {
                tempElement.remove();
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            this.messageTextarea.value = originalContent;
            
            // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—à–∏–±–æ—á–Ω–æ–µ
            const tempElement = document.querySelector(`[data-message-id="temp_${tempMessage.created_at}"]`);
            if (tempElement) {
                tempElement.querySelector('.message-status').textContent = '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏';
                tempElement.querySelector('.message-status').classList.add('error');
            }
            
            alert('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + error.message);
        } finally {
            this.sendMessageButton.disabled = false;
            this.messageTextarea.focus();
        }
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    async subscribeToRealtimeMessages() {
        try {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            if (this.channel) {
                this.supabase.removeChannel(this.channel);
            }

            console.log('üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...');

            this.channel = this.supabase
                .channel(`ticket:${this.ticketId}`)
                .on(
                    'postgres_changes',
                    {
                        event: 'INSERT',
                        schema: 'public',
                        table: 'messages',
                        filter: `ticket_id=eq.${this.ticketId}`
                    },
                    async (payload) => {
                        console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ real-time —Å–æ–æ–±—â–µ–Ω–∏–µ:', payload.new);
                        
                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–Ω–∏ —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã)
                        if (payload.new.user_id === this.user.id) {
                            console.log('‚û°Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
                            return;
                        }

                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫—ç—à–µ
                        if (!this.participants.has(payload.new.user_id)) {
                            const { data: profile } = await this.supabase
                                .from('profiles')
                                .select('username, avatar_url, role')
                                .eq('id', payload.new.user_id)
                                .single();
                            
                            if (profile) {
                                this.participants.set(payload.new.user_id, profile);
                            }
                        }

                        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                        this.addMessageToBox(payload.new, true);
                    }
                )
                .on(
                    'postgres_changes',
                    {
                        event: 'UPDATE',
                        schema: 'public',
                        table: 'tickets',
                        filter: `id=eq.${this.ticketId}`
                    },
                    (payload) => {
                        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞:', payload.new);
                        this.isTicketClosed = payload.new.is_closed;
                        this.updateTicketUI();
                    }
                )
                .subscribe((status) => {
                    console.log('üì° –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:', status);
                    this.isSubscribed = status === 'SUBSCRIBED';
                    
                    if (status === 'SUBSCRIBED') {
                        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
                    } else if (status === 'CHANNEL_ERROR') {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞');
                    } else if (status === 'TIMED_OUT') {
                        console.warn('‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                    }
                });

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ real-time:', error);
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
     */
    async executeTicketClosure() {
        this.confirmCloseBtn.disabled = true;
        this.confirmCloseBtn.textContent = '–ó–∞–∫—Ä—ã—Ç–∏–µ...';

        try {
            const { error } = await this.supabase
                .from('tickets')
                .update({ is_closed: true })
                .eq('id', this.ticketId);

            if (error) throw error;

            this.isTicketClosed = true;
            this.updateTicketUI();
            this.confirmationModal.classList.remove('active');
            
            console.log('‚úÖ –¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Ç–∏–∫–µ—Ç–∞:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞: ' + error.message);
        } finally {
            this.confirmCloseBtn.disabled = false;
            this.confirmCloseBtn.textContent = '–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç';
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    updateTicketUI() {
        const isDisabled = this.isTicketClosed;
        
        this.messageTextarea.disabled = isDisabled;
        this.messageTextarea.placeholder = isDisabled 
            ? '–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.' 
            : '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...';
        
        this.sendMessageButton.disabled = isDisabled;
        this.closeTicketButton.disabled = isDisabled;
        this.closeTicketButton.textContent = isDisabled ? '–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç' : '–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç';

        if (isDisabled) {
            this.messageForm.classList.add('disabled');
        } else {
            this.messageForm.classList.remove('disabled');
        }
    }

    /**
     * –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —á–∞—Ç–∞ –≤–Ω–∏–∑
     */
    scrollToBottom() {
        setTimeout(() => {
            this.chatBox.scrollTop = this.chatBox.scrollHeight;
        }, 100);
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É
     */
    showError(message) {
        this.chatBox.innerHTML = `
            <div class="error-message">
                <h3>–û—à–∏–±–∫–∞</h3>
                <p>${message}</p>
                <button onclick="window.history.back()">–ù–∞–∑–∞–¥</button>
            </div>
        `;
        this.messageForm.style.display = 'none';
        this.closeTicketButton.style.display = 'none';
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
     */
    destroy() {
        if (this.channel) {
            this.supabase.removeChannel(this.channel);
            console.log('üßπ –ö–∞–Ω–∞–ª real-time –æ—á–∏—â–µ–Ω');
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    try {
        const authManager = new AuthManager();
        window.ticketPage = new TicketPage(authManager);
        
        // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            if (window.ticketPage) {
                window.ticketPage.destroy();
            }
        });
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
    }
});
